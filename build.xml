<?xml version="1.0" encoding="UTF-8"?>

<project name="PLAYGROUND" default="build">
	<target name="build" depends="prepare,compser,phpcs-ci,phpmd-ci,phpcpd,lint,docblox,phpunit,coverage-checker />

	<target name="build-parallel" depends="prepare,tools-parallel" />

	<target name="tools-parallel" description="Run tools in parallel">
		<parallel threadCount="1">
			<sequential>
			<antcall target="composer" />
			<antcall target="phpmd-ci" />
			</sequential>
			<antcall target="phpcpd" />
			<antcall target="phpcs-ci" />
			<antcall target="lint" />
			<antcall target="docblox" />
			<sequential>
			<antcall target="phpunit" />
			<antcall target="coverage-checker" />
			</sequential>
		</parallel>
	</target>

	<target name="clean" description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api" />
		<delete dir="${basedir}/build/code-browser" />
		<delete dir="${basedir}/build/coverage" />
		<delete dir="${basedir}/build/logs" />
	</target>

	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="${basedir}/build/api" />
		<mkdir dir="${basedir}/build/code-browser" />
		<mkdir dir="${basedir}/build/coverage" />
		<mkdir dir="${basedir}/build/logs" />
		<mkdir dir="${basedir}/build/pdepend" />
	</target>
	
	<target name="composer" description="Installing dependencies">
    	     <exec executable="composer" failonerror="true">
      		<arg value="update" />
    	     </exec>
        </target>
	
		<!--target name="phpmd"
		description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpmd">
			<arg path="${basedir}/module" />
			<arg value="text" />
			<arg value="${basedir}/build/phpmd.xml" />
		</exec>
	</target-->

	<target name="phpmd-ci"
		description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
		<exec executable="phpmd">
			<arg path="${basedir}/module" />
			<arg value="xml" />
			<arg value="${basedir}/build/phpmd.xml" />
			<arg value="--reportfile" />
			<arg value="${basedir}/build/logs/pmd.xml" />
		</exec>
	</target>

	<target name="phpcs-ci"
		description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
		<exec executable="phpcs" output="/dev/null">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg value="--standard=PSR2" />
			<arg path="${basedir}/module" />
		</exec>
	</target>
	
	<target name="phpcpd" description="Find duplicate code using PHPCPD">
		<exec executable="phpcpd">
			<arg value="--log-pmd" />
			<arg value="${basedir}/build/logs/pmd-cpd.xml" />
			<arg path="${basedir}/module" />
		</exec>
	</target>
	
	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="false" error="${basedir}/build/logs/phperr.check">
			<arg value="-l" />  
			<fileset dir="${basedir}/module">
				<include name="**/*.php" />
			</fileset>
		</apply>
	</target>
	
	<target name="docblox" depends="prepare"
		description="Generate API documentation using DocBlox">
		<exec executable="docblox" failonerror="false">
			<arg value="-d" />
			<arg path="${basedir}/module" />
			<arg value="-t" />
			<arg path="${basedir}/build/api" />
			<arg line="--title '${ant.project.name}'" />
		</exec>
	</target>

        <target name="phpunit">
  		<exec dir="${basedir}/vendor/bin" executable="phpunit" failonerror="true" description="Run unit tests with PHPUnit">
  			<arg line="-c ${basedir}/module/Application" />   
  		</exec>
        </target>
   
        <target name="coverage-checker" depends="phpunit">
  		<exec dir="/usr/bin" executable="php" failonerror="true" description="check unit test coverage percentage">
  			<arg line="${basedir}/build/coverage-checker.php ${basedir}/module/Application/build/clover.xml 2" />   
  		</exec>
        </target>

</project>
